/*
 * This file is generated by jOOQ.
 */
package com.hstar.crylic.db.generated.tables;


import com.hstar.crylic.db.generated.Public;
import com.hstar.crylic.db.generated.tables.records.ViewerRecord;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Viewer extends TableImpl<ViewerRecord> {

    private static final long serialVersionUID = 437078129;

    /**
     * The reference instance of <code>public.viewer</code>
     */
    public static final Viewer VIEWER = new Viewer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewerRecord> getRecordType() {
        return ViewerRecord.class;
    }

    /**
     * The column <code>public.viewer.id</code>.
     */
    public final TableField<ViewerRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("gen_random_uuid()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.viewer.email</code>.
     */
    public final TableField<ViewerRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.viewer.password</code>.
     */
    public final TableField<ViewerRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.CHAR.nullable(false), this, "");

    /**
     * The column <code>public.viewer.first_name</code>.
     */
    public final TableField<ViewerRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.viewer.last_name</code>.
     */
    public final TableField<ViewerRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.viewer.created_at</code>.
     */
    public final TableField<ViewerRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.viewer.updated_at</code>.
     */
    public final TableField<ViewerRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.viewer</code> table reference
     */
    public Viewer() {
        this(DSL.name("viewer"), null);
    }

    /**
     * Create an aliased <code>public.viewer</code> table reference
     */
    public Viewer(String alias) {
        this(DSL.name(alias), VIEWER);
    }

    /**
     * Create an aliased <code>public.viewer</code> table reference
     */
    public Viewer(Name alias) {
        this(alias, VIEWER);
    }

    private Viewer(Name alias, Table<ViewerRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private Viewer(Name alias, Table<ViewerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public <O extends Record> Viewer(Table<O> child, ForeignKey<O, ViewerRecord> key) {
        super(child, key, VIEWER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Viewer as(String alias) {
        return new Viewer(DSL.name(alias), this, parameters);
    }

    @Override
    public Viewer as(Name alias) {
        return new Viewer(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Viewer rename(String name) {
        return new Viewer(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public Viewer rename(Name name) {
        return new Viewer(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public Viewer call(JSON hasuraSession) {
        return new Viewer(DSL.name(getName()), null, new Field[] { 
              DSL.val(hasuraSession, org.jooq.impl.SQLDataType.JSON)
        });
    }

    /**
     * Call this table-valued function
     */
    public Viewer call(Field<JSON> hasuraSession) {
        return new Viewer(DSL.name(getName()), null, new Field[] { 
              hasuraSession
        });
    }
}
