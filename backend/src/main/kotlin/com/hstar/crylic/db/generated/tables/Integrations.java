/*
 * This file is generated by jOOQ.
 */
package com.hstar.crylic.db.generated.tables;


import com.hstar.crylic.db.generated.Keys;
import com.hstar.crylic.db.generated.Public;
import com.hstar.crylic.db.generated.tables.records.IntegrationsRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Integrations extends TableImpl<IntegrationsRecord> {

    private static final long serialVersionUID = -977135990;

    /**
     * The reference instance of <code>public.Integrations</code>
     */
    public static final Integrations INTEGRATIONS = new Integrations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntegrationsRecord> getRecordType() {
        return IntegrationsRecord.class;
    }

    /**
     * The column <code>public.Integrations.id</code>.
     */
    public final TableField<IntegrationsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Integrations_id_seq\"'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Integrations.user_id</code>.
     */
    public final TableField<IntegrationsRecord, UUID> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.Integrations.type</code>.
     */
    public final TableField<IntegrationsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.Integrations.token</code>.
     */
    public final TableField<IntegrationsRecord, String> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.Integrations.created_at</code>.
     */
    public final TableField<IntegrationsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.Integrations.updated_at</code>.
     */
    public final TableField<IntegrationsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * Create a <code>public.Integrations</code> table reference
     */
    public Integrations() {
        this(DSL.name("Integrations"), null);
    }

    /**
     * Create an aliased <code>public.Integrations</code> table reference
     */
    public Integrations(String alias) {
        this(DSL.name(alias), INTEGRATIONS);
    }

    /**
     * Create an aliased <code>public.Integrations</code> table reference
     */
    public Integrations(Name alias) {
        this(alias, INTEGRATIONS);
    }

    private Integrations(Name alias, Table<IntegrationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Integrations(Name alias, Table<IntegrationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Integrations(Table<O> child, ForeignKey<O, IntegrationsRecord> key) {
        super(child, key, INTEGRATIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<IntegrationsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INTEGRATIONS;
    }

    @Override
    public UniqueKey<IntegrationsRecord> getPrimaryKey() {
        return Keys.INTEGRATIONS_PKEY;
    }

    @Override
    public List<UniqueKey<IntegrationsRecord>> getKeys() {
        return Arrays.<UniqueKey<IntegrationsRecord>>asList(Keys.INTEGRATIONS_PKEY);
    }

    @Override
    public List<ForeignKey<IntegrationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<IntegrationsRecord, ?>>asList(Keys.INTEGRATIONS__INTEGRATIONS_USER_ID_FKEY);
    }

    public User user() {
        return new User(this, Keys.INTEGRATIONS__INTEGRATIONS_USER_ID_FKEY);
    }

    @Override
    public Integrations as(String alias) {
        return new Integrations(DSL.name(alias), this);
    }

    @Override
    public Integrations as(Name alias) {
        return new Integrations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Integrations rename(String name) {
        return new Integrations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Integrations rename(Name name) {
        return new Integrations(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, UUID, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
