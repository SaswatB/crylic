import { Project } from "../../lib/project/Project";
import { ProjectConfig } from "../../lib/project/ProjectConfig";
import { PluginBase } from "../PluginBase";

export class TailwindPlugin extends PluginBase {
  private options: Exclude<
    ProjectConfig["configFile"]["plugins"],
    undefined
  >["tailwind"];

  public shouldActivate(config: ProjectConfig) {
    return (
      config.configFile.plugins?.tailwind?.enabled ??
      config.isPackageInstalled("tailwindcss")
    );
  }

  public override onInit(project: Project) {
    this.options = project.config.configFile.plugins?.tailwind;
  }

  public override onClose() {
    this.options = undefined;
  }

  public override overrideWebpackConfig() {
    const configObject = this.options?.config
      ? `, { config: "${this.options.config}" }`
      : "";
    return `
/**
 * Webpack override function for Crylic
 *
 * @param {import('webpack').Configuration} config Webpack config generated by Crylic
 * @param {import('webpack')} webpack Instance of Webpack
 * @returns {import('webpack').Configuration} Modified webpack config
 */
module.exports = function (options, webpack) {
  // insert tailwind before every instance of css-loader
  // todo support more definitions of css-loader than just a string literal
  options.module.rules[0].oneOf
    .filter((r) => r.use?.includes?.("css-loader"))
    .forEach((r) => {
      r.use.splice(r.use.findIndex((u) => u === "css-loader") + 1, 0, {
        loader: "postcss-loader",
        options: {
          postcssOptions: {
            plugins: [["tailwindcss"${configObject}], "autoprefixer"],
          },
          sourceMap: true,
        },
      });
    });
  return options;
};
`.trim();
  }
}
